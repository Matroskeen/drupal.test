<?php

/**
 * Implements hook_init();
 */
function test_init() {
  drupal_add_css(drupal_get_path('module', 'test') . '/css/test.fun.css');
  drupal_add_js(drupal_get_path('module', 'test') . '/js/test.fun.js');
}

/**
 * Implements the hook_menu();
 */
function test_menu() {

  $items['register'] = array (
    'title' => 'Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('test_custom_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/review'] = array (
    'title' => 'Review',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('test_review_form', 1),
    'access callback' => 'film_tasks_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/description'] = array (
    'title' => 'Description',
    'page callback' => 'test_show_description',
    'page arguments' => array(1),
    'access callback' => 'film_tasks_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['test/ajax'] = array (
    'title' => 'Description',
    'page callback' => 'test_ajax_test',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function film_tasks_access($node) {
  if ($node->type === 'film') {
    return true;
  }
  return false;
}

function test_show_description($film) {
  $description = theme('description_display', array('description' => $film->body[LANGUAGE_NONE][0]['value']));
  $header = array(
    'user' => t('User'),
    'mark' => t('Mark'),
    'impression' => t('Impression'),
  );

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'review')
    ->entityCondition('bundle', 'review')
    ->fieldCondition('field_film', 'target_id', $film->nid);
  $result = $query->execute();

  if (empty($result['review'])) {
    return t('Sorry. No reviews found :(');
  }
  $reviews_id = array_keys($result['review']);

  $rows = array();
  $items = array();

  foreach($reviews_id as $id) {
    $review = entity_metadata_wrapper('review', $id);
    array_push($rows, array(
      'user' => l($review->uid->name->value(), 'user/' . $review->uid->getIdentifier()),
      'mark' => $review->field_mark->value(),
      'impression' => $review->field_impression->value(),
    ));
    array_push($items, $review->field_impression->value());
  }
  $table = theme('table', array('header' => $header, 'rows' => $rows));

  array_push($items, array(
    'data' => 'Awesome!',
    'children' => array(
      '+1', '+2',
    ),
  ));

  $list = theme('item_list', array('items' => $items, 'title' => t('Reviews'), 'type' => 'ul'));
  $build = array(
    'table' => array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $header,
      '#prefix' => '<div id="aaa">',
      '#suffix' => '</div>',
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#title' => t('Reviews'),
    ),
    'ajax_link' => array(
      '#title' => t('HAHA AJAX'),
      '#type' => 'link',
      '#href' => 'test/ajax',
      '#external' => TRUE,
      '#ajax' => array(
        'effect' => 'fade',
      ),
    ),
  );
  return $build; // $description . $table . $list;
}

function test_ajax_test() {
  $commands = array();
  // Replace the content of '#object-1' on the page with 'some html here'.
  $commands[] = ajax_command_replace('#aaa', '<div id="aaa">AAAAAAAAAAAAAAAAAAAAAAAaa</div>');
  // Add a visual "changed" marker to the '#object-1' element.
  // $commands[] = ajax_command_changed('#object-1');
  // Menu 'page callback' and #ajax['callback'] functions are supposed to
  // return render arrays. If returning an Ajax commands array, it must be
  // encapsulated in a render array structure.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements the hook_theme();
 */
function test_theme($existing, $type, $theme, $path) {
  return array(
    'description_display' => array(
      'variables' => array(
        'description' => NULL,
      ),
      'template' => 'description',
      'path' => drupal_get_path('theme', 'my_subtheme') . '/templates',
    ),
  );
}

function template_preprocess_description_display(&$variables) {
  $text = $variables['description'];
  $text = array_map('trim', explode(".", $text));
  $odd = $even = array();
  for ($i = 0; $i < count($text); $i++) {
    if ($i % 2 == 0) {
      $odd[] = $text[$i];
    }
    else {
      $even[] = $text[$i];
    }
  }
  foreach (array('odd', 'even') as $type) {
    $variables[$type] = trim(implode('. ', ${$type}));
  }
}
/*function theme_description_display($variables) {
  $description = $variables['description'];
  if (!empty($description)) {
    return '<em>' . strip_tags($description) . '</em>';
  }
}*/



/**
 * Creates the review form.
 */
function test_review_form($form, &$form_state, $node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'review')
    ->entityCondition('bundle', 'review')
    ->fieldCondition('field_film', 'target_id', $node->nid);
  $result = $query->execute();

  $empty = TRUE;

  if (!empty($result['review'])) {
    $review = entity_metadata_wrapper('review', key($result['review']));
    $form_state['review'] = $review;
    $empty = FALSE;
  }
  $form_state['node'] = $node;

  $form['cool'] = array (
    '#type' => 'checkbox',
    '#title' => t('It was cool?'),
    '#value' => $empty ? '' : $review->field_cool_->value(),
  );
  $form['mark'] = array(
    '#type' => 'textfield',
    '#title' => t('Mark: '),
    '#required' => TRUE,
    '#number_type' => 'integer',
    '#default_value' => ($empty ? '' : $review->field_mark->value()),
    '#states' => array(
      'invisible' => array(
        ':input[name="cool"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['impression'] = array(
    '#type' => 'textarea',
    '#title' => t('Impression: '),
    '#required' => TRUE,
    '#resizable' => FALSE,
    '#default_value' => $empty ? '' : $review->field_impression->value(),
  );

  $form['language'] = array(
    '#type' => 'radios',
    '#default_value' => 0,
    '#options' => array(
      0 => t('English'),
      1 => t('Українська'),
      2 => t('Русский'),
    ),
    '#ajax' => array(
      'callback' => 'review_form_change_select',
      'wrapper' => 'select_wrapper',
      'effect' => 'fade',
    ),
  );
  $form['select_wrapper'] = array(
    '#prefix' => '<div id="select_wrapper">',
    '#suffix' => '</div>',
  );

  $options = array();
  $lang = (empty($form_state['values']['language']) ? 0 : $form_state['values']['language']);
  switch ($lang) {
    case 0:
      $options = array(
        0 => 'First',
        1 => 'Second',
        2 => 'Third',
      );
      break;
    case 1:
      $options = array(
        0 => 'Перший',
        1 => 'Другий',
        2 => 'Третій',
        3 => 'Четвертий',
        4 => "П'ятий",
      );
      break;
    case 2:
      $options = array(
        0 => 'Первый',
        1 => 'Второй',
        2 => 'Третий',
        3 => 'Первый',
        4 => 'Второй',
        5 => 'Третий',
        6 => 'Первый',
        7 => 'Второй',
        8 => 'Третий',
      );
      break;
  }

  $form['select_wrapper']['items'] = array(
    '#type' => 'select',
    '#options' => $options,
  );

  $form['subscribe'] = array (
    '#type' => 'checkbox',
    '#title' => t('Subscribe on our news'),
    '#ajax' => array (
      'callback' => 'review_form_show_email_field',
      'wrapper' => 'replace-textfield',
      'method' => 'replace',
    ),
  );
  $form['wrapper'] = array(
    '#prefix' => '<div id="replace-textfield">',
    '#suffix' => '</div>',
  );
//  if (!empty($form_state['values']['subscribe'])) {
//    $form['wrapper']['email'] = array(
//      '#type' => 'textfield',
//      '#title' => t('Email'),
//    );
//  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#default_value' => t('Send'),
  );

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'test') . '/css/test.css',
  );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'test') . '/js/test.js',
  );
  $form['#attached']['js'][] = array(
    'data' => array('test' => array('name' => 'Ivan')),
    'type' => 'setting',
  );

  return $form;
}

function review_form_show_email_field($form, &$form_state) {
  $commands = array();
  // Replace the content of '#object-1' on the page with 'some html here'.
  $commands[] = ajax_command_replace('#replace-textfield', 'some html here');
  // Add a visual "changed" marker to the '#object-1' element.
  // $commands[] = ajax_command_changed('#object-1');
  // Menu 'page callback' and #ajax['callback'] functions are supposed to
  // return render arrays. If returning an Ajax commands array, it must be
  // encapsulated in a render array structure.
  return array('#type' => 'ajax', '#commands' => $commands);

  // return $form['wrapper'];
}

function review_form_change_select($form, &$form_state) {
  return $form['select_wrapper'];
}

/**
 * Validates the review form.
 */
function test_review_form_validate($form, &$form_state) {
  $mark = $form_state['values']['mark'];
  if ($mark < 0 || $mark > 10) {
    form_set_error('mark', t('Mark: Enter a number from 0 to 10 pls.'));
  }
}

/**
 * Process the review form.
 */
function test_review_form_submit($form, &$form_state) {
  if (!$form_state['review']) {
    $review_entity = entity_create('review', array('type' => 'review'));
    $review = entity_metadata_wrapper('review', $review_entity);
  }
  else {
    $review = $form_state['review'];
  }

  $review->field_mark->set($form_state['values']['mark']);
  $review->field_impression->set($form_state['values']['impression']);
  $review->field_cool_->set($form_state['values']['cool']);
  $review->field_film->set($form_state['node']->nid);
  $review->save();

  drupal_set_message(t('Thank you for the review!'));
}

/*function test_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'test'),
  );
}*/
/**
 * Implements hook_entity_info().
 */
/*function test_entity_info() {
  $entity = array(
    'review' => array(
      'label' => t('Review'),
      'plural label' => t('Reviews'),
      'base table' => 'review_entity',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id'
      ),
      'module' => 'test',
      'admin ui' => array(
        'path' => 'admin/structure/reviews',
        'controller class' => 'EntityDefaultUIController',
        // 'file' => 'includes/lawmakers.admin.inc',
      ),
      'access callback' => 'user_access',
    ),
  );
  return $entity;
}*/

/**
 * Implements hook_form_alter().
 */
function test_form_alter(&$form, &$form_state, $form_id) {

  switch($form_id) {
    case 'real_film_node_form':
      $title_element = $form['title'];
      $image_element = $form['field_image'];
      unset($form['title']);
      unset($form['field_image']);
      $form['container']['#pre_render'][] = 'buu';

      $form['container'] = array(
        '#prefix' => '<div class="row">',
        '#suffix' => '</div>',
      );
      $form['container']['title'] = $title_element;
      $form['container']['title']['#prefix'] = '<div class="col-md-6">';
      $form['container']['title']['#suffix'] = '</div>';
      $form['container']['field_image'] = $image_element;
      $form['container']['field_image']['#prefix'] = '<div class="col-md-6">';
      $form['container']['field_image']['#suffix'] = '</div>';
      break;
  }
  return $form;
  
}

function buu($element) {
  unset($element['foo']['bar']);
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function test_form_real_film_node_form_alter(&$form, &$form_state) {
  
}

/**
 * Implements hook_menu_alter().
 */
function test_menu_alter(&$items) {
  $items['node/%node/devel']['access callback'] = FALSE;
}
